#===============================
#
# Preparation
# -----------
#
#===============================

# JavaScript functions that will be available in each 'continuous' instruction
{prepContinuous `
	function collision(ballCx, ballCy, brickX, brickY, brickWidth, brickHeight) {
		return ballCx > brickX && ballCx < brickX+brickWidth && ballCy > brickY && ballCy < brickY+brickHeight
	}
`}

#========
# drawing
#========

{deffunc drawNewBrick (p_x p_y)
	:displayNewSVGElementIn (+ '<rect width="75" height="20" x="' $p_x '" y="' $p_y '" style="fill: #0095DD" />') 'svg'
}

{deffunc drawNewBall (p_x p_y)
	:displayNewSVGElementIn (+ '<circle r="10" cx="' $p_x '" cy="' $p_y '" style="fill: #0095DD" />') 'svg'
}

{deffunc drawNewPaddle (p_x p_y)
	:displayNewSVGElementIn (+ '<rect id="paddle" width="75" height="10" x="' $p_x '" y="' $p_y '" style="fill: #0095DD" />') 'svg'
}

{deffunc drawText (p_x p_y p_text)
	:displayNewSVGElementIn (+ '<text style="font: 16px Arial;fill: #0095DD;" x="' $p_x '" y="' $p_y '">' $p_text '</text>') 'svg'
}

#=================
# lives of objects
#=================

{deffunc lifeOfBrick (p_column p_row)
	# birth
	#======
	.var life
	.var thisBrick <-- :drawNewBrick [[$p_column * 85] + 30] [[$p_row * 30] + 30]
	
	# after birth
	#============
	{par @life
		%whileTrueAwaitFrame adapt thisBrick `
			// Meeting
			//--------
			for (const ball of events.get('oneBall')) {
				if (     ball && collision(  v(ball.cx),  v(ball.cy),  v(thisBrick.x),  v(thisBrick.y),  v(thisBrick.width),  v(thisBrick.height)  )     ) {
					ball.dy = - ball.dy
					goBreak('life')
				}
			}
		`
	}
	
	# death
	#======
	{js (thisBrick) `
		thisBrick.parentNode.removeChild(thisBrick)
	`}
}

{deffunc lifeOfPaddle ()
	# birth
	#======
	.var thisPaddle <-- :drawNewPaddle 202 310
	
	# after birth
	#============
	{par
		# keyboard management
		#--------------------
		.var stopMove
		.var move
		# Each 'keyup' is translated into a stopMove
		%whileTrueAwaitDom_translate $document 'keyup' stopMove
		{whileTrue
			.var evt <-- :awaitDOMevtBeep $document 'keydown'
			{js (evt thisPaddle) `thisPaddle.evt = evt`}
			{par @move
				# first parallel branch: await a stopMove and break the 'par' construct
				move <-- :await stopMove beep
				# second parallel branch: At each frame, move the paddle
				%whileTrueAwaitFrame play thisPaddle `
					if(thisPaddle.evt.code  == "ArrowRight") {
						thisPaddle.setAttribute('x', v(thisPaddle.x) + 7)
					} else if (thisPaddle.evt.code  == "ArrowLeft") {
						thisPaddle.setAttribute('x', v(thisPaddle.x) - 7)
					}
				`
			}
		}
		# mouse management
		#-----------------
		%whileTrueAwaitDom_js $document 'mousemove' `
			const gameZone = document.getElementById('gameZone')
			const relativeX = evt.clientX - gameZone.getBoundingClientRect().left
			const paddle = document.getElementById('paddle')
			paddle.setAttribute('x', relativeX - 37)
		`
		# ball bouncing (on paddle) management
		#-------------------------------------
		%whileTrueAwaitFrame adapt thisPaddle `
			// Meeting
			//--------
			for (const ball of events.get('oneBall')) {
				if (     ball && collision(  v(ball.cx),  v(ball.cy),  v(thisPaddle.x),  v(thisPaddle.y),  v(thisPaddle.width),  v(thisPaddle.height)  )     ) {
					ball.dy = - ball.dy
				}
			}
		`
	}
}

{deffunc lifeOfBall ()
	# birth
	#======
	.var life
	.var thisBall <-- :drawNewBall 240 290
	{js (thisBall) `
		thisBall.dx = 2
		thisBall.dy = -2
	`}
	
	# after birth
	#============
	{par @life
		# broadcasting the ball
		#----------------------
		%whileTrueAwaitFrame send thisBall `
			send('oneBall', thisBall)
		`
		# bouncing (on wall) management
		#------------------------------
		%whileTrueAwaitFrame adapt thisBall `
			// Bouncing
			//---------
			if (v(thisBall.cx) + v(thisBall.r) > 480) thisBall.dx = - Math.abs(thisBall.dx)
			if (v(thisBall.cx) - v(thisBall.r) < 0) thisBall.dx = Math.abs(thisBall.dx)
			if (v(thisBall.cy) - v(thisBall.r) < 0) thisBall.dy = Math.abs(thisBall.dy)
			
			// If the ball is missed
			//----------------------
			if (v(thisBall.cy) - v(thisBall.r) > 320) {
				goBreak('life')
			}
		`
		# move of the ball
		#-----------------
		%whileTrueAwaitFrame play thisBall `
			thisBall.setAttribute('cx', v(thisBall.cx) + thisBall.dx)
			thisBall.setAttribute('cy', v(thisBall.cy) + thisBall.dy)
		`
	}
	
	# death
	#======
	{js (thisBall) `
		thisBall.parentNode.removeChild(thisBall)
	`}
}

#===============================
#
# Main program
# ------------
#
#===============================

# list of rows and columns
.var column <-- :parRange 0 4
.var row <-- :parRange 0 2

# number of "lives"
.var numberOfLives <-- 3
.var livesText <-- %drawText 415 20 'Lives: 3'

# score
.var score <-- 0
.var scoreText <-- %drawText 8 20 'Score: 0'

# just a little optimization (?)
!separateMicrostep

{par
	
	#===================
	# Lives of objects
	#===================
	
	# Bricks
	#--------
	{seq
		{foreachPar column     # 'foreach' execute each one in parallel
			{foreachPar row
				{seq
					# this executes all the life of the brick
					:lifeOfBrick $column $row
					# When the life of a brick ends, the score increases
					score <-- [+ 1]
				}
			}
		}
		# When the lives of all bricks end, you win
		{js () `alert("YOU WIN, CONGRATS!");document.location.reload()`}
	}
	
	# Ball
	#--------
	{seq
		{while [$numberOfLives > 0]
			# When numberOfLives > 0, a new ball comes to life
			!lifeOfBall
			# When the life of the ball ends, numberOfLives decreases
			numberOfLives <-- [- 1]
		}
		# When the last ball is dead, you loose
		{js () `alert("GAME OVER");document.location.reload()`}
	}
	
	# Paddle
	#--------
	!lifeOfPaddle
	
	#=======================================
	# Display of all pieces of information
	#=======================================
	{whileTrue
		# At each time when numberOfLives is set, the corresponding display is updated
		:await numberOfLives beep
		{js (livesText numberOfLives) `
			livesText.textContent = 'Lives: ' + numberOfLives
		`}
	}
	{whileTrue
		# At each time when score is set, the corresponding display is updated
		:await score beep
		{js (scoreText score) `
			scoreText.textContent = 'Score: ' + score
		`}
	}
}
